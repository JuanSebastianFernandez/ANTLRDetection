import re
import numpy as np
from antlr4 import CommonTokenStream
from grammars.Java.JavaParser import JavaParser
from grammars.Java.JavaParserListener import JavaParserListener
from signatures.finding_types import JavaSignatures, SENSITIVE_PATH_REGEX_GLOBAL
from typing import List, Dict, Set, Tuple

class VestaJavaListener(JavaParserListener):
    """
    ANTLR4-based listener that statically analyzes Java source code to identify
    suspicious or potentially malicious patterns. It uses heuristic and entropy-based
    techniques to flag obfuscation, sensitive data exposure, risky method calls,
    structural anomalies, and suspicious imports.

    Attributes:
        token_stream (CommonTokenStream): Token stream from the parser.
        static_findings (List[Dict]): Collected findings from the source code.
        _finding_ids (Set[Tuple]): Internal set to avoid duplicate findings.
        java_signatures (JavaSignatures): Reference to static rules and patterns.
    """

    def __init__(self, token_stream: CommonTokenStream) -> None:
        """
        Initializes the VestaJavaListener with a token stream.

        Args:
            token_stream (CommonTokenStream): The token stream from the parser.
        """
        self.token_stream: CommonTokenStream = token_stream
        self.static_findings: List[Dict] = []
        self.java_signatures: JavaSignatures = JavaSignatures()
        self._finding_ids: Set[Tuple] = set()       

    def add_finding(self, finding: Dict) -> None:
        """
        Add a new finding to the result list, avoiding duplicates.

        Args:
            finding (Dict): Finding dictionary with keys 'finding_type', 'line', etc.
        """
        finding_id: Tuple = (finding['finding_type'], finding['line'])
        if finding_id not in self._finding_ids:
            self.static_findings.append(finding)
            self._finding_ids.add(finding_id)

    def enterClassDeclaration(self, ctx: JavaParser.ClassDeclarationContext) -> None:
        """
        Triggered upon entering a class declaration.
        Detects short or obfuscated class names.

        Args:
            ctx (JavaParser.ClassDeclarationContext): Parsing context.
        """
        class_name: str = ctx.identifier().getText()

        # --- Suspicious class names (e.g., obfuscated or autogenerated) ---
        if '$' in class_name or len(class_name) <= 2:
            details: Dict = self.java_signatures.NAMING_CONVENTIONS["OBFUSCATED_CLASS_SHORT_NAME"]
            self.add_finding({
                "finding_type": details.get("type", "No type provided"),
                "description": f"{details.get('desc', '')} '{class_name}', possible obfuscation",
                "line": ctx.start.line,
                "severity": details.get("severity", "No severity provided"),
                "weight": details.get("weight", 1.0),
                "behavioral_trigger": details.get("behavioral_trigger", None)
            })
            
    def exitMethodDeclaration(self, ctx: JavaParser.MethodDeclarationContext) -> None:
        """
        Triggered after a method declaration has been fully parsed.
        Detects suspicious naming, minimal override bodies, and calculates entropy.

        Args:
            ctx (JavaParser.MethodDeclarationContext): Parsing context.
        """
        method_name: str = ctx.identifier().getText()

        # --- Suspiciously short method names (e.g., obfuscation) ---
        if len(method_name) <= 2:
            details: Dict = self.java_signatures.NAMING_CONVENTIONS["OBFUSCATED_METHOD_SHORT_NAME"]
            self.add_finding({
                "finding_type": details.get("type", "No type provided"),
                "description": f"{details.get('desc', '')} '{method_name}()', possible obfuscation",
                "line": ctx.start.line,
                "severity": details.get("severity", "No severity provided"),
                "weight": details.get("weight", 1.0),
                "behavioral_trigger": details.get("behavioral_trigger", None)
            })
            

        # --- Suspicious override methods with minimal bodies ---
        is_override: bool = False
        if ctx.parentCtx and hasattr(ctx.parentCtx, 'parentCtx') and hasattr(ctx.parentCtx.parentCtx, 'modifier'):
            for mod_ctx in ctx.parentCtx.parentCtx.modifier():
                if mod_ctx.classOrInterfaceModifier() and mod_ctx.classOrInterfaceModifier().annotation() and '@Override' in mod_ctx.classOrInterfaceModifier().annotation().getText():
                    is_override = True
                    break

        if is_override and ctx.methodBody() and ctx.methodBody().block() and len(ctx.methodBody().block().blockStatement()) <= 1:
            details: Dict = self.java_signatures.STRUCTURAL_PATTERNS["SUSPICIOUS_OVERRIDE"]
            self.add_finding({
                "finding_type": details.get("type", "No type provided"),
                "description": f"{details.get('desc', '')} in '{method_name}'() has an empty or minimal body, which could be an evasion technique.",
                "line": ctx.start.line,
                "severity": details.get("severity", "No severity provided"),
                "weight": details.get("weight", 1.0),
                "behavioral_trigger": details.get("behavioral_trigger", None)
            })

    def enterLiteral(self, ctx: JavaParser.LiteralContext) -> None:
        """
        Triggered when a literal (e.g., string) is encountered.
        Detects secrets, entropy in strings, and sensitive path access.

        Args:
            ctx (JavaParser.LiteralContext): Parsing context.
        """
        if ctx.STRING_LITERAL():
            string_text: str = ctx.getText()
            string_content: str = string_text[1:-1]  # Remove quotes

            # --- NEW DETECTION: Sensitive system path access ---
            if SENSITIVE_PATH_REGEX_GLOBAL.search(string_content):
                details: Dict = self.java_signatures.STRUCTURAL_PATTERNS["SENSITIVE_PATH_ACCESS"]
                self.add_finding({
                    "finding_type": details.get("type", "No type provided"),
                    "description": f"{details.get('desc', '')} Detected in: {string_content}",
                    "line": ctx.start.line,
                    "severity": details.get("severity", "No severity provided"),
                    "weight": details.get("weight", 1.0),
                    "behavioral_trigger": details.get("behavioral_trigger", None)
                })

            for keyword, details in self.java_signatures.STRING_KEYWORDS.items():
                if re.search(re.escape(keyword), string_content, re.IGNORECASE):
                    self.add_finding({
                        "finding_type": details.get("type", "No type provided"),
                        "description": f"{details.get('desc', '')} Found in a string literal containing '{keyword}'",
                        "line": ctx.start.line, 
                        "severity": details.get("severity", "No severity provided"),
                        "weight": details.get("weight", 1.0),
                        "behavioral_trigger": details.get("behavioral_trigger", None)
                    })

    def enterMethodCall(self, ctx: JavaParser.MethodCallContext) -> None:
        """
        Detects use of potentially dangerous method calls.

        Args:
            ctx (JavaParser.MethodCallContext): Parsing context.
        """
        call_text: str = ctx.getText()
        for pattern, details in self.java_signatures.METHOD_CALLS.items():
            if call_text in pattern:
                self.add_finding({
                        "finding_type": details.get("type", "No type provided"),
                        "description": f"{details.get('desc', '')} Detected in: '{pattern}'",
                        "line": ctx.start.line, 
                        "severity": details.get("severity", "No severity provided"),
                        "weight": details.get("weight", 1.0),
                        "behavioral_trigger": details.get("behavioral_trigger", None)
                    })
                

    def enterCreator(self, ctx: JavaParser.CreatorContext) -> None:
        """
        Detects use of 'new File(".")', which may indicate self-aware code.

        Args:
            ctx (JavaParser.CreatorContext): Parsing context.
        """
        if ctx.createdName().getText() == 'File':
            if ctx.classCreatorRest() and ctx.classCreatorRest().arguments().getText() == '(".")':
                details: Dict = self.java_signatures.STRUCTURAL_PATTERNS["SELF_AWARE_CODE_FILE_DOT"]
                self.add_finding({
                    "finding_type": details.get("type", "No type provided"),
                    "description": "Code accesses the current directory via 'new File(\".\")', which may precede self-modification.",
                    "line": ctx.start.line,
                    "severity": details.get("severity", "No severity provided"),
                    "weight": details.get("weight", 1.0),
                    "behavioral_trigger": details.get("behavioral_trigger", None)
                })

    def enterImportDeclaration(self, ctx: JavaParser.ImportDeclarationContext) -> None:
        """
        Detects suspicious imports based on predefined patterns.

        Args:
            ctx (JavaParser.ImportDeclarationContext): Parsing context.
        """
        import_text: str = ctx.qualifiedName().getText()
        for pattern, details in self.java_signatures.IMPORTS.items():
            if import_text.startswith(pattern):
                self.add_finding({
                        "finding_type": details.get("type", "No type provided"),
                        "description": f"{details.get('desc', '')} In import path: '{pattern}'",
                        "line": ctx.start.line, 
                        "severity": details.get("severity", "No severity provided"),
                        "weight": details.get("weight", 1.0),
                        "behavioral_trigger": details.get("behavioral_trigger", None)
                    })

    def enterCatchClause(self, ctx: JavaParser.CatchClauseContext) -> None:
        """
        Detects empty catch blocks, which may hide critical security issues.

        Args:
            ctx (JavaParser.CatchClauseContext): Parsing context.
        """
        if ctx.block() and not ctx.block().blockStatement():
            details: Dict = self.java_signatures.STRUCTURAL_PATTERNS["EMPTY_CATCH_BLOCK"]
            self.add_finding({
                "finding_type": details.get("type", "No type provided"),
                "description": f"{details.get('desc', '')} can mask critical security issues.",
                "line": ctx.start.line, 
                "severity": details.get("severity", "No severity provided"),
                "weight": details.get("weight", 1.0),
                "behavioral_trigger": details.get("behavioral_trigger", None)
            })

    def get_analysis_report(self) -> Dict:
        """
        Generates a final analysis report including statistical features and detected findings.

        Returns:
            Dict: A dictionary containing:
                - 'feature_vector': Feature values useful for ML models or heuristics.
                - 'static_findings': List of detected static issues in the code.
        """
        self.static_findings = sorted(self.static_findings, key=lambda x: (x['line'], x['finding_type']))
        self.static_findings = [self.static_findings[i] for i in range(len(self.static_findings)) 
                                if i == 0 or (self.static_findings[i]['finding_type'], self.static_findings[i]['description']) !=
                                (self.static_findings[i-1]['finding_type'], self.static_findings[i-1]['description'])]

        behavioral_trigger_counts: Dict[str, int] = {}
        for finding in self.static_findings:
            trigger = finding.get("behavioral_trigger")
            if trigger:
                behavioral_trigger_counts[trigger] = behavioral_trigger_counts.get(trigger, 0) + 1
        
        # 2. Generamos hallazgos de comportamiento consolidados para el reporte si se cumple el umbral.
        #    Esta lógica es para la detección en vivo.
        if behavioral_trigger_counts:
            all_triggers_found = set(behavioral_trigger_counts.keys())
            for pattern_name, details in self.java_signatures.BEHAVIORAL_PATTERNS.items():
                required_triggers = set(details["triggers"])
                if required_triggers:
                    intersection = required_triggers.intersection(all_triggers_found)
                    intersection_percentage = len(intersection) / len(required_triggers)

                    if intersection_percentage >= 0.6:  # Umbral de coincidencia del 60%
                        self.add_finding({
                            "finding_type": pattern_name,
                            "description": (
                                f"BEHAVIORAL PATTERN FOUND: '{pattern_name}' (coincidence of the {intersection_percentage:.2%}). "
                                f"Triggers founded: {list(intersection)} - {details.get('desc', '')}"
                            ),
                            "line": 0,  # Línea 0 indica un hallazgo de archivo completo
                            "severity": details.get("severity", "No severity provided"),
                            "weight": details.get("weight", 1.0),
                            "percentage_of_pattern": f"{intersection_percentage:.2%}"
                        })

        # 3. Retornamos el informe final
        original_code_text: str = self.token_stream.getText(0)
        
        final_report: Dict = {
            "original_code": original_code_text,
            "static_findings": self.static_findings,
            "behavioral_trigger_counts": behavioral_trigger_counts
        }

        return final_report
